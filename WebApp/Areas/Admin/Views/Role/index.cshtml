@model WebApp.Areas.Admin.Controllers.RoleController.UserRoleViewModel
@{
    ViewData["Title"] = "Danh sách quyền";
}

<h4 class="mb-3">@ViewData["Title"]</h4>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">
        @TempData["Error"]
    </div>
}

<div class="row g-3">
    <!-- Danh sách User -->
    <div class="col-md-6">
        <h6 class="mb-2">Danh sách User</h6>
        <ul id="user-list" class="list-group list-group-sm scroll-list">
            @if (Model.Users != null && Model.Users.Any())
            {
                foreach (var u in Model.Users)
                {
                    <li class="list-group-item user-item py-1 px-2" data-username="@u.Username">
                        <i class="bi bi-person"></i> @u.Username
                    </li>
                }
            }
            else
            {
                <li class="list-group-item text-muted py-1 px-2">Không có user</li>
            }
        </ul>
    </div>

    <!-- Danh sách Role hệ thống -->
    <div class="col-md-6">
        <h6 class="mb-2">Danh sách Role</h6>
        <ul id="role-list" class="list-group list-group-sm scroll-list">
            @if (Model.Roles != null && Model.Roles.Any())
            {
                foreach (var r in Model.Roles)
                {
                    <li class="list-group-item py-1 px-2">
                        <i class="bi bi-shield-lock"></i> @r.role
                    </li>
                }
            }
            else
            {
                <li class="list-group-item text-muted py-1 px-2">Không có role</li>
            }
        </ul>
    </div>
</div>

<!-- Danh sách role của user được chọn -->
<div class="mt-4">
    <h6 class="mb-2">Role của User</h6>
    <ul id="role-list-user" class="list-group list-group-sm scroll-list">
        <li class="list-group-item text-muted py-1 px-2">Chọn user để xem role</li>
    </ul>
</div>

<!-- Form tạo Role -->
<div class="mt-4">
    <h6 class="mb-2">Tạo Role mới</h6>
    <form asp-area="Admin" asp-controller="Role" asp-action="CreateRole" method="post" class="row g-2">
        <div class="col-auto">
            <input type="text" class="form-control form-control-sm" name="roleName" placeholder="Nhập tên role" required />
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-sm btn-success">
                <i class="bi bi-plus-circle"></i> Thêm Role
            </button>
        </div>
    </form>

    @if (TempData["CreateRoleMessage"] != null)
    {
        <div class="mt-2 small">@TempData["CreateRoleMessage"]</div>
    }
</div>

<!-- Form gán role -->
<div class="mt-4">
    <h6 class="mb-2">Gán Role cho User</h6>
    <form asp-area="Admin" asp-controller="Role" asp-action="AssignRoleToUser" method="post" class="row g-2">
        <div class="col-auto">
            <select name="username" class="form-select form-select-sm" required>
                <option value="">--Chọn User--</option>
                @foreach (var u in Model.Users)
                {
                    <option value="@u.Username">@u.Username</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <select name="roleName" class="form-select form-select-sm" required>
                <option value="">--Chọn Role--</option>
                @foreach (var r in Model.Roles)
                {
                    <option value="@r.role">@r.role</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-sm btn-primary">
                <i class="bi bi-person-plus"></i> Gán
            </button>
        </div>
    </form>

    @if (TempData["AssignRoleMessage"] != null)
    {
        <div class="mt-2 small">@TempData["AssignRoleMessage"]</div>
    }
</div>
<form asp-area="Admin" asp-controller="Role" asp-action="RevokeRole" method="post" class="row g-2">
    <div class="col-auto">
        <select id="assign-username" name="username" class="form-select form-select-sm" required>
            <option value="">--Chọn User--</option>
            @foreach (var u in Model.Users)
            {
                <option value="@u.Username">@u.Username</option>
            }
        </select>
    </div>
    <div class="col-auto">
        <select id="assign-rolename" name="roleName" class="form-select form-select-sm" required>
            <option value="">--Chọn Role--</option>
        </select>
    </div>
    <div class="col-auto">
        <button type="submit" class="btn btn-sm btn-danger">
            <i class="bi bi-person-dash"></i> Thu hồi
        </button>
    </div>
</form>


@section Scripts {
    <script>
                // Khi chọn user trong form Thu hồi → load role tương ứng
        document.getElementById('assign-username').addEventListener('change', async function () {
            const username = this.value;
            const selectRole = document.getElementById('assign-rolename');
            selectRole.innerHTML = '<option value="">--Chọn Role--</option>';

            if (!username) return; // nếu chưa chọn user thì không gọi API

            try {
                const response = await fetch(`/Admin/Role/GetRolesOfUser?username=${encodeURIComponent(username)}`);
                if (!response.ok) throw new Error();
                const roles = await response.json();

                if (roles.length === 0) {
                    const opt = document.createElement('option');
                    opt.disabled = true;
                    opt.textContent = 'User chưa có role';
                    selectRole.appendChild(opt);
                } else {
                    roles.forEach(r => {
                        const roleName = r.grantedRole || r.GrantedRole;
                        const opt = document.createElement('option');
                        opt.value = roleName;
                        opt.textContent = roleName;
                        selectRole.appendChild(opt);
                    });
                }
            } catch (error) {
                console.error(error);
                const opt = document.createElement('option');
                opt.disabled = true;
                opt.textContent = 'Lỗi tải role';
                selectRole.appendChild(opt);
            }
        });

        // Khi click user, load role của user đó
        document.querySelectorAll('.user-item').forEach(item => {
            item.addEventListener('click', async function () {
                document.querySelectorAll('.user-item').forEach(u => u.classList.remove('active'));
                this.classList.add('active');

                const username = this.dataset.username;
                const list = document.getElementById('role-list-user');
                list.innerHTML = `<li class="list-group-item text-muted py-1 px-2">Đang tải quyền của ${username}...</li>`;

                try {
                    const response = await fetch(`/Admin/Role/GetRolesOfUser?username=${encodeURIComponent(username)}`);
                    if (!response.ok) throw new Error();
                    const roles = await response.json();
                    list.innerHTML = '';


                    if (roles.length === 0) {
                        list.innerHTML = `<li class="list-group-item text-muted py-1 px-2">Không có role</li>`;
                    } else {
                        roles.forEach(r => {
                            const roleName = r.grantedRole || r.GrantedRole;

                            // Hiển thị trong danh sách role của user
                            const li = document.createElement('li');
                            li.classList.add('list-group-item', 'py-1', 'px-2');
                            li.innerHTML = `<i class="bi bi-shield-lock"></i> ${roleName}`;
                            list.appendChild(li);

                            // ✅ Đồng thời đổ role vào select nếu bạn muốn revoke
                            const opt = document.createElement('option');
                            opt.value = roleName;
                            opt.textContent = roleName;
                        });
                    }
                } catch (error) {
                    console.error(error);
                    list.innerHTML = `<li class="list-group-item text-danger py-1 px-2">Không thể tải quyền</li>`;
                }
            });
        });

    </script>
}

<style>
    .scroll-list {
        max-height: 100px;
        overflow-y: auto;
        font-size: 0.65rem;
        line-height: 1.2;
    }

    .user-item {
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .user-item:hover {
            background-color: #f0f0f0;
        }

        .user-item.active {
            background-color: #007bff;
            color: white;
        }

    #role-list li i,
    #role-list-user li i,
    #user-list li i {
        margin-right: 5px;
    }

    h6 {
        font-size: 0.9rem;
        font-weight: 600;
    }

    form .form-control-sm,
    form .form-select-sm {
        font-size: 0.75rem;
    }
</style>
