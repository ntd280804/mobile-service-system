@model WebApp.Areas.Admin.Controllers.ImportController.ImportStockDto
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Import Stock";
    var username = HttpContextAccessor.HttpContext.Session.GetString("Username");
    if (string.IsNullOrEmpty(Model.EmpUsername))
    {
        Model.EmpUsername = username;
    }
}

<h2>Danh sách Stock In</h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

<a class="btn btn-primary mb-3" href="@Url.Action("Create", "Import", new { area = "Admin" })">Thêm Stock In</a>

<form asp-action="Create" method="post">
    <div>
        <input type="hidden" asp-for="EmpUsername" />
    </div>
    <div>
        <label asp-for="Note"></label>
        <input asp-for="Note" />
    </div>

    <!-- Private Key -->
    <div>
        <label>Private Key </label><br />
        <input type="file" id="private-key-file" accept=".txt" />
        <input type="hidden" id="PrivateKey" name="PrivateKey" />

    </div>


    <!-- Danh sách Items -->
    <div>
        <label>Items</label>
        <div id="items-container">
            @for (int i = 0; i < Model.Items.Count; i++)
            {
                <div class="item-row mb-2">
                    <label>Part Name</label>
                    <input name="Items[@i].PartName" value="@Model.Items[i].PartName" />
                    <label>Manufacturer</label>
                    <input name="Items[@i].Manufacturer" value="@Model.Items[i].Manufacturer" />
                    <label>Serial</label>
                    <input name="Items[@i].Serial" value="@Model.Items[i].Serial" />
                    <label>Price</label>
                    <input name="Items[@i].Price" value="@Model.Items[i].Price" type="number" step="0.01" min="0" />
                    <button type="button" class="btn btn-danger btn-sm remove-item">–</button>
                </div>
            }
        </div>

        <div class="mt-2">
            <button type="button" id="add-item" class="btn btn-success">+ Thêm Item</button>
        </div>

        <hr />

        <!-- Sinh hàng loạt -->
        <h5>Sinh nhiều item tự động</h5>
        <div class="mb-3">
            <label>Part Name</label>
            <input type="text" id="auto-partname" class="form-control" placeholder="VD: Cảm biến độ ẩm" />
            <label>Manufacturer</label>
            <input type="text" id="auto-manufacturer" class="form-control" placeholder="VD: Arduino" />
            <label>Serial Prefix</label>
            <input type="text" id="auto-prefix" class="form-control" placeholder="VD: A-" />
            <label>Giá mỗi cái</label>
            <input type="number" id="auto-price" class="form-control" step="0.01" min="0" />
            <label>Số lượng</label>
            <input type="number" id="auto-qty" class="form-control" min="1" value="1" />
            <button type="button" id="generate-items" class="btn btn-secondary mt-2">Tạo danh sách</button>
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Create</button>
</form>

@section Scripts {
    <script>

        document.addEventListener("DOMContentLoaded", function () {
            const container = document.getElementById("items-container");
            const addButton = document.getElementById("add-item");
            const generateButton = document.getElementById("generate-items");

            // Thêm 1 item thủ công
            addButton.addEventListener("click", function () {
                addItem();
            });

            // Xóa item
            container.addEventListener("click", function (e) {
                if (e.target.classList.contains("remove-item")) {
                    e.target.closest(".item-row").remove();
                    reindexItems();
                }
            });

            // Sinh nhiều item
            generateButton.addEventListener("click", function () {
                const partName = document.getElementById("auto-partname").value.trim();
                const manufacturer = document.getElementById("auto-manufacturer").value.trim();
                const prefix = document.getElementById("auto-prefix").value.trim();
                const price = document.getElementById("auto-price").value;
                const qty = parseInt(document.getElementById("auto-qty").value);

                if (!partName || !manufacturer || !prefix || !qty || qty < 1) {
                    alert("Vui lòng nhập đầy đủ thông tin để tạo danh sách!");
                    return;
                }

                for (let i = 1; i <= qty; i++) {
                    const serial = `${prefix}${i}`;
                    addItem(partName, manufacturer, serial, price);
                }
            });

            // Hàm thêm 1 item
            function addItem(partName = "", manufacturer = "", serial = "", price = "") {
                const index = container.children.length;
                const itemHtml = `
                    <div class="item-row mb-2">
                        <label>Part Name</label>
                        <input name="Items[${index}].PartName" value="${partName}" />
                        <label>Manufacturer</label>
                        <input name="Items[${index}].Manufacturer" value="${manufacturer}" />
                        <label>Serial</label>
                        <input name="Items[${index}].Serial" value="${serial}" />
                        <label>Price</label>
                        <input name="Items[${index}].Price" value="${price}" type="number" step="0.01" min="0" />
                        <button type="button" class="btn btn-danger btn-sm remove-item">–</button>
                    </div>`;
                container.insertAdjacentHTML('beforeend', itemHtml);
            }

            // Cập nhật lại index sau khi xóa
            function reindexItems() {
                const rows = container.querySelectorAll(".item-row");
                rows.forEach((row, idx) => {
                    row.querySelectorAll("input").forEach(input => {
                        const field = input.name.split('.').pop();
                        input.name = `Items[${idx}].${field}`;
                    });
                });
            }
        });
                document.getElementById("private-key-file").addEventListener("change", function (e) {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = function () {
                document.getElementById("PrivateKey").value = reader.result;
            };
            reader.readAsText(file, "UTF-16");
        });

    </script>
}
